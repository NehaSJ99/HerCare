{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swara\\\\Desktop\\\\pearl_hacks\\\\HerCare\\\\frontend\\\\src\\\\pages\\\\Pharmacy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { icon } from \"leaflet\";\nimport axios from \"axios\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Haversine formula to calculate distance between two lat/lng points\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getDistance = (lat1, lng1, lat2, lng2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distanceKm = R * c; // Distance in km\n  const distanceMiles = distanceKm * 0.621371; // Convert km to miles\n  return {\n    km: distanceKm.toFixed(2),\n    // Distance in kilometers\n    miles: distanceMiles.toFixed(2) // Distance in miles\n  };\n};\nconst Pharmacy = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [pharmacies, setPharmacies] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Get the user's current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setLocation({\n          lat: latitude,\n          lng: longitude\n        });\n        try {\n          // Query OpenStreetMap for pharmacies using Overpass API\n          const response = await axios.get(`https://overpass-api.de/api/interpreter?data=[out:json];(node[\"amenity\"=\"pharmacy\"](around:5000,${latitude},${longitude}););out;`);\n\n          // Set pharmacies state with the nearby pharmacies data\n          setPharmacies(response.data.elements);\n        } catch (err) {\n          setError(\"Unable to fetch nearby pharmacies.\");\n        }\n      }, () => setError(\"Location access denied!\"));\n    } else {\n      setError(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // Function to extract the address from available tags\n  const getAddress = tags => {\n    // Check for different possible address fields in the tags\n    const street = tags[\"addr:street\"] || \"Street not available\";\n    const city = tags[\"addr:city\"] || tags[\"addr:town\"] || \"City not available\";\n    const postcode = tags[\"addr:postcode\"] || \"Postcode not available\";\n    return `${street}, ${city}, ${postcode}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-0 m-0 h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold my-4 text-center\",\n      children: \" Nearby Pharmacies \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }, this) : location ? /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: location,\n      zoom: 14,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Marker, {\n        position: location,\n        icon: icon({\n          iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n          // Blue marker for user location\n          iconSize: [40, 60],\n          iconAnchor: [20, 60]\n        }),\n        children: [/*#__PURE__*/_jsxDEV(Popup, {\n          children: \" Your location \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 52\n      }, this), \" \", pharmacies.map(pharmacy => {\n        const {\n          km,\n          miles\n        } = getDistance(location.lat, location.lng, pharmacy.lat, pharmacy.lon); // Get distance in km and miles\n\n        const pharmacyName = pharmacy.tags.name || \"Pharmacy\";\n        const address = getAddress(pharmacy.tags); // Get address from available tags\n\n        // Create a Google Maps link for directions\n        const googleMapsLink = `https://www.google.com/maps/dir/?api=1&origin=${location.lat},${location.lng}&destination=${pharmacy.lat},${pharmacy.lon}`;\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: pharmacy.lat,\n            lng: pharmacy.lon\n          },\n          icon: icon({\n            iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n            // Blue pharmacy icon\n            iconSize: [40, 60],\n            iconAnchor: [20, 60]\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\" \", pharmacyName, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 29\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 66\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                children: [\" \", address, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 29\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 51\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \" Distance: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 29\n              }, this), km, \" km / \", miles, \"miles \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: googleMapsLink,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"Get Directions \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 29\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), \" \"]\n        }, pharmacy.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 34\n        }, this);\n      }), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: \" Loading map... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 14\n  }, this);\n};\n_s(Pharmacy, \"02uZ9t0QFXjyg+47zSaS6NhIYgk=\");\n_c = Pharmacy;\nexport default Pharmacy;\nvar _c;\n$RefreshReg$(_c, \"Pharmacy\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","icon","axios","jsxDEV","_jsxDEV","getDistance","lat1","lng1","lat2","lng2","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","distanceKm","distanceMiles","km","toFixed","miles","Pharmacy","_s","location","setLocation","pharmacies","setPharmacies","error","setError","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","response","get","data","elements","err","getAddress","tags","street","city","postcode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","attribution","iconUrl","iconSize","iconAnchor","map","pharmacy","lon","pharmacyName","name","address","googleMapsLink","href","target","rel","id","_c","$RefreshReg$"],"sources":["C:/Users/swara/Desktop/pearl_hacks/HerCare/frontend/src/pages/Pharmacy.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { icon } from \"leaflet\";\r\nimport axios from \"axios\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n// Haversine formula to calculate distance between two lat/lng points\r\nconst getDistance = (lat1, lng1, lat2, lng2) => {\r\n    const R = 6371; // Radius of the Earth in km\r\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n    const dLng = ((lng2 - lng1) * Math.PI) / 180;\r\n    const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos((lat1 * Math.PI) / 180) *\r\n        Math.cos((lat2 * Math.PI) / 180) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distanceKm = R * c; // Distance in km\r\n    const distanceMiles = distanceKm * 0.621371; // Convert km to miles\r\n    return {\r\n        km: distanceKm.toFixed(2), // Distance in kilometers\r\n        miles: distanceMiles.toFixed(2), // Distance in miles\r\n    };\r\n};\r\n\r\nconst Pharmacy = () => {\r\n    const [location, setLocation] = useState(null);\r\n    const [pharmacies, setPharmacies] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Get the user's current location\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                async(position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    setLocation({ lat: latitude, lng: longitude });\r\n\r\n                    try {\r\n                        // Query OpenStreetMap for pharmacies using Overpass API\r\n                        const response = await axios.get(\r\n                            `https://overpass-api.de/api/interpreter?data=[out:json];(node[\"amenity\"=\"pharmacy\"](around:5000,${latitude},${longitude}););out;`\r\n                        );\r\n\r\n                        // Set pharmacies state with the nearby pharmacies data\r\n                        setPharmacies(response.data.elements);\r\n                    } catch (err) {\r\n                        setError(\"Unable to fetch nearby pharmacies.\");\r\n                    }\r\n                },\r\n                () => setError(\"Location access denied!\")\r\n            );\r\n        } else {\r\n            setError(\"Geolocation is not supported by this browser.\");\r\n        }\r\n    }, []);\r\n\r\n    // Function to extract the address from available tags\r\n    const getAddress = (tags) => {\r\n        // Check for different possible address fields in the tags\r\n        const street = tags[\"addr:street\"] || \"Street not available\";\r\n        const city = tags[\"addr:city\"] || tags[\"addr:town\"] || \"City not available\";\r\n        const postcode = tags[\"addr:postcode\"] || \"Postcode not available\";\r\n        return `${street}, ${city}, ${postcode}`;\r\n    };\r\n\r\n    return ( <\r\n        div className = \"p-0 m-0 h-screen\" >\r\n        <\r\n        h2 className = \"text-2xl font-bold my-4 text-center\" > Nearby Pharmacies < /h2>\r\n\r\n        {\r\n            error ? ( <\r\n                p className = \"text-center\" > { error } < /p>\r\n            ) : location ? ( <\r\n                MapContainer center = { location }\r\n                zoom = { 14 }\r\n                style = {\r\n                    { height: \"100%\", width: \"100%\" }\r\n                } >\r\n                <\r\n                TileLayer url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors' /\r\n                >\r\n                { /* Marker for user location */ } <\r\n                Marker position = { location }\r\n                icon = {\r\n                    icon({\r\n                        iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\", // Blue marker for user location\r\n                        iconSize: [40, 60],\r\n                        iconAnchor: [20, 60],\r\n                    })\r\n                } >\r\n                <\r\n                Popup > Your location < /Popup> < /\r\n                Marker >\r\n\r\n                { /* Markers for nearby pharmacies */ } {\r\n                    pharmacies.map((pharmacy) => {\r\n                        const { km, miles } = getDistance(\r\n                            location.lat,\r\n                            location.lng,\r\n                            pharmacy.lat,\r\n                            pharmacy.lon\r\n                        ); // Get distance in km and miles\r\n\r\n                        const pharmacyName = pharmacy.tags.name || \"Pharmacy\";\r\n                        const address = getAddress(pharmacy.tags); // Get address from available tags\r\n\r\n                        // Create a Google Maps link for directions\r\n                        const googleMapsLink = `https://www.google.com/maps/dir/?api=1&origin=${location.lat},${location.lng}&destination=${pharmacy.lat},${pharmacy.lon}`;\r\n\r\n                        return ( <\r\n                            Marker key = { pharmacy.id }\r\n                            position = {\r\n                                { lat: pharmacy.lat, lng: pharmacy.lon }\r\n                            }\r\n                            icon = {\r\n                                icon({\r\n                                    iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\", // Blue pharmacy icon\r\n                                    iconSize: [40, 60],\r\n                                    iconAnchor: [20, 60],\r\n                                })\r\n                            } >\r\n                            <\r\n                            Popup >\r\n                            <\r\n                            div >\r\n                            <\r\n                            strong > { pharmacyName } < /strong> <\r\n                            br / >\r\n                            <\r\n                            i > { address } < /i> <\r\n                            br / >\r\n                            <\r\n                            strong > Distance: < /strong>{km} km / { miles }\r\n                            miles <\r\n                            br / >\r\n                            <\r\n                            a href = { googleMapsLink }\r\n                            target = \"_blank\"\r\n                            rel = \"noopener noreferrer\" >\r\n                            Get Directions <\r\n                            /a> < /\r\n                            div > <\r\n                            /Popup> < /\r\n                            Marker >\r\n                        );\r\n                    })\r\n                } <\r\n                /MapContainer>\r\n            ) : ( <\r\n                p className = \"text-center\" > Loading map... < /p>\r\n            )\r\n        } <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default Pharmacy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}